// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pydata.proto

#include "pydata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rl {
PROTOBUF_CONSTEXPR RLData_RestInvestsEntry_DoNotUse::RLData_RestInvestsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RLData_RestInvestsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal _RLData_RestInvestsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RLData_plots::RLData_plots(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.n_)*/{}
  , /*decltype(_impl_._n_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RLData_plotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RLData_plotsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RLData_plotsDefaultTypeInternal() {}
  union {
    RLData_plots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RLData_plotsDefaultTypeInternal _RLData_plots_default_instance_;
PROTOBUF_CONSTEXPR RLData_invlife::RLData_invlife(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.life_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RLData_invlifeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RLData_invlifeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RLData_invlifeDefaultTypeInternal() {}
  union {
    RLData_invlife _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RLData_invlifeDefaultTypeInternal _RLData_invlife_default_instance_;
PROTOBUF_CONSTEXPR RLData::RLData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.restplotsoftype_)*/{}
  , /*decltype(_impl_.restinvests_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.recentrents_)*/{}
  , /*decltype(_impl_.nfreeplots10km_)*/{}
  , /*decltype(_impl_._nfreeplots10km_cached_byte_size_)*/{0}
  , /*decltype(_impl_.avnewrents_)*/{}
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.liquidity_)*/0
  , /*decltype(_impl_.management_)*/0
  , /*decltype(_impl_.nfarms10km_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RLDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RLDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RLDataDefaultTypeInternal() {}
  union {
    RLData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RLDataDefaultTypeInternal _RLData_default_instance_;
}  // namespace rl
static ::_pb::Metadata file_level_metadata_pydata_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pydata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pydata_2eproto = nullptr;

const uint32_t TableStruct_pydata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rl::RLData_RestInvestsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData_RestInvestsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rl::RLData_RestInvestsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData_RestInvestsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rl::RLData_plots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rl::RLData_plots, _impl_.n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rl::RLData_invlife, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rl::RLData_invlife, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData_invlife, _impl_.life_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.restplotsoftype_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.liquidity_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.management_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.restinvests_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.recentrents_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.nfarms10km_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.nfreeplots10km_),
  PROTOBUF_FIELD_OFFSET(::rl::RLData, _impl_.avnewrents_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::rl::RLData_RestInvestsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::rl::RLData_plots)},
  { 17, -1, -1, sizeof(::rl::RLData_invlife)},
  { 25, -1, -1, sizeof(::rl::RLData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rl::_RLData_RestInvestsEntry_DoNotUse_default_instance_._instance,
  &::rl::_RLData_plots_default_instance_._instance,
  &::rl::_RLData_invlife_default_instance_._instance,
  &::rl::_RLData_default_instance_._instance,
};

const char descriptor_table_protodef_pydata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014pydata.proto\022\002rl\"\360\002\n\006RLData\022)\n\017restPlo"
  "tsOfType\030\001 \003(\0132\020.rl.RLData.plots\022\013\n\003age\030"
  "\002 \001(\005\022\021\n\tliquidity\030\003 \001(\002\022\022\n\nmanagement\030\004"
  " \001(\002\0220\n\013restInvests\030\005 \003(\0132\033.rl.RLData.Re"
  "stInvestsEntry\022\023\n\013recentRents\030\006 \003(\001\022\022\n\nn"
  "farms10km\030\007 \001(\005\022\026\n\016nfreeplots10km\030\010 \003(\005\022"
  "\022\n\navNewRents\030\t \003(\001\032F\n\020RestInvestsEntry\022"
  "\013\n\003key\030\001 \001(\005\022!\n\005value\030\002 \001(\0132\022.rl.RLData."
  "invlife:\0028\001\032\022\n\005plots\022\t\n\001n\030\001 \003(\005\032$\n\007invli"
  "fe\022\013\n\003num\030\001 \001(\005\022\014\n\004life\030\002 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_pydata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pydata_2eproto = {
    false, false, 397, descriptor_table_protodef_pydata_2eproto,
    "pydata.proto",
    &descriptor_table_pydata_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_pydata_2eproto::offsets,
    file_level_metadata_pydata_2eproto, file_level_enum_descriptors_pydata_2eproto,
    file_level_service_descriptors_pydata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pydata_2eproto_getter() {
  return &descriptor_table_pydata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pydata_2eproto(&descriptor_table_pydata_2eproto);
namespace rl {

// ===================================================================

RLData_RestInvestsEntry_DoNotUse::RLData_RestInvestsEntry_DoNotUse() {}
RLData_RestInvestsEntry_DoNotUse::RLData_RestInvestsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RLData_RestInvestsEntry_DoNotUse::MergeFrom(const RLData_RestInvestsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RLData_RestInvestsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pydata_2eproto_getter, &descriptor_table_pydata_2eproto_once,
      file_level_metadata_pydata_2eproto[0]);
}

// ===================================================================

class RLData_plots::_Internal {
 public:
};

RLData_plots::RLData_plots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rl.RLData.plots)
}
RLData_plots::RLData_plots(const RLData_plots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RLData_plots* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){from._impl_.n_}
    , /*decltype(_impl_._n_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rl.RLData.plots)
}

inline void RLData_plots::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.n_){arena}
    , /*decltype(_impl_._n_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RLData_plots::~RLData_plots() {
  // @@protoc_insertion_point(destructor:rl.RLData.plots)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RLData_plots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.n_.~RepeatedField();
}

void RLData_plots::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RLData_plots::Clear() {
// @@protoc_insertion_point(message_clear_start:rl.RLData.plots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.n_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RLData_plots::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_n(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_n(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RLData_plots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rl.RLData.plots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 n = 1;
  {
    int byte_size = _impl_._n_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_n(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rl.RLData.plots)
  return target;
}

size_t RLData_plots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rl.RLData.plots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 n = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.n_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._n_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RLData_plots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RLData_plots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RLData_plots::GetClassData() const { return &_class_data_; }


void RLData_plots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RLData_plots*>(&to_msg);
  auto& from = static_cast<const RLData_plots&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rl.RLData.plots)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.n_.MergeFrom(from._impl_.n_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RLData_plots::CopyFrom(const RLData_plots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rl.RLData.plots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLData_plots::IsInitialized() const {
  return true;
}

void RLData_plots::InternalSwap(RLData_plots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.n_.InternalSwap(&other->_impl_.n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RLData_plots::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pydata_2eproto_getter, &descriptor_table_pydata_2eproto_once,
      file_level_metadata_pydata_2eproto[1]);
}

// ===================================================================

class RLData_invlife::_Internal {
 public:
};

RLData_invlife::RLData_invlife(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rl.RLData.invlife)
}
RLData_invlife::RLData_invlife(const RLData_invlife& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RLData_invlife* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.life_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.life_, &from._impl_.life_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.life_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:rl.RLData.invlife)
}

inline void RLData_invlife::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.life_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RLData_invlife::~RLData_invlife() {
  // @@protoc_insertion_point(destructor:rl.RLData.invlife)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RLData_invlife::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RLData_invlife::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RLData_invlife::Clear() {
// @@protoc_insertion_point(message_clear_start:rl.RLData.invlife)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.life_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.life_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RLData_invlife::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double life = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RLData_invlife::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rl.RLData.invlife)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // double life = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_life = this->_internal_life();
  uint64_t raw_life;
  memcpy(&raw_life, &tmp_life, sizeof(tmp_life));
  if (raw_life != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_life(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rl.RLData.invlife)
  return target;
}

size_t RLData_invlife::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rl.RLData.invlife)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double life = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_life = this->_internal_life();
  uint64_t raw_life;
  memcpy(&raw_life, &tmp_life, sizeof(tmp_life));
  if (raw_life != 0) {
    total_size += 1 + 8;
  }

  // int32 num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RLData_invlife::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RLData_invlife::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RLData_invlife::GetClassData() const { return &_class_data_; }


void RLData_invlife::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RLData_invlife*>(&to_msg);
  auto& from = static_cast<const RLData_invlife&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rl.RLData.invlife)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_life = from._internal_life();
  uint64_t raw_life;
  memcpy(&raw_life, &tmp_life, sizeof(tmp_life));
  if (raw_life != 0) {
    _this->_internal_set_life(from._internal_life());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RLData_invlife::CopyFrom(const RLData_invlife& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rl.RLData.invlife)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLData_invlife::IsInitialized() const {
  return true;
}

void RLData_invlife::InternalSwap(RLData_invlife* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RLData_invlife, _impl_.num_)
      + sizeof(RLData_invlife::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(RLData_invlife, _impl_.life_)>(
          reinterpret_cast<char*>(&_impl_.life_),
          reinterpret_cast<char*>(&other->_impl_.life_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RLData_invlife::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pydata_2eproto_getter, &descriptor_table_pydata_2eproto_once,
      file_level_metadata_pydata_2eproto[2]);
}

// ===================================================================

class RLData::_Internal {
 public:
};

RLData::RLData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RLData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:rl.RLData)
}
RLData::RLData(const RLData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RLData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.restplotsoftype_){from._impl_.restplotsoftype_}
    , /*decltype(_impl_.restinvests_)*/{}
    , decltype(_impl_.recentrents_){from._impl_.recentrents_}
    , decltype(_impl_.nfreeplots10km_){from._impl_.nfreeplots10km_}
    , /*decltype(_impl_._nfreeplots10km_cached_byte_size_)*/{0}
    , decltype(_impl_.avnewrents_){from._impl_.avnewrents_}
    , decltype(_impl_.age_){}
    , decltype(_impl_.liquidity_){}
    , decltype(_impl_.management_){}
    , decltype(_impl_.nfarms10km_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.restinvests_.MergeFrom(from._impl_.restinvests_);
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nfarms10km_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.nfarms10km_));
  // @@protoc_insertion_point(copy_constructor:rl.RLData)
}

inline void RLData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.restplotsoftype_){arena}
    , /*decltype(_impl_.restinvests_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.recentrents_){arena}
    , decltype(_impl_.nfreeplots10km_){arena}
    , /*decltype(_impl_._nfreeplots10km_cached_byte_size_)*/{0}
    , decltype(_impl_.avnewrents_){arena}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.liquidity_){0}
    , decltype(_impl_.management_){0}
    , decltype(_impl_.nfarms10km_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RLData::~RLData() {
  // @@protoc_insertion_point(destructor:rl.RLData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RLData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restplotsoftype_.~RepeatedPtrField();
  _impl_.restinvests_.Destruct();
  _impl_.restinvests_.~MapField();
  _impl_.recentrents_.~RepeatedField();
  _impl_.nfreeplots10km_.~RepeatedField();
  _impl_.avnewrents_.~RepeatedField();
}

void RLData::ArenaDtor(void* object) {
  RLData* _this = reinterpret_cast< RLData* >(object);
  _this->_impl_.restinvests_.Destruct();
}
void RLData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RLData::Clear() {
// @@protoc_insertion_point(message_clear_start:rl.RLData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.restplotsoftype_.Clear();
  _impl_.restinvests_.Clear();
  _impl_.recentrents_.Clear();
  _impl_.nfreeplots10km_.Clear();
  _impl_.avnewrents_.Clear();
  ::memset(&_impl_.age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nfarms10km_) -
      reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.nfarms10km_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RLData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rl.RLData.plots restPlotsOfType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_restplotsoftype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 age = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float liquidity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.liquidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float management = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.management_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .rl.RLData.invlife> restInvests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.restinvests_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double recentRents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_recentrents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_recentrents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 nfarms10km = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.nfarms10km_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 nfreeplots10km = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nfreeplots10km(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_nfreeplots10km(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double avNewRents = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_avnewrents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_avnewrents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RLData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rl.RLData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rl.RLData.plots restPlotsOfType = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_restplotsoftype_size()); i < n; i++) {
    const auto& repfield = this->_internal_restplotsoftype(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_age(), target);
  }

  // float liquidity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_liquidity = this->_internal_liquidity();
  uint32_t raw_liquidity;
  memcpy(&raw_liquidity, &tmp_liquidity, sizeof(tmp_liquidity));
  if (raw_liquidity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_liquidity(), target);
  }

  // float management = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_management = this->_internal_management();
  uint32_t raw_management;
  memcpy(&raw_management, &tmp_management, sizeof(tmp_management));
  if (raw_management != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_management(), target);
  }

  // map<int32, .rl.RLData.invlife> restInvests = 5;
  if (!this->_internal_restinvests().empty()) {
    using MapType = ::_pb::Map<int32_t, ::rl::RLData_invlife>;
    using WireHelper = RLData_RestInvestsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_restinvests();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated double recentRents = 6;
  if (this->_internal_recentrents_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_recentrents(), target);
  }

  // int32 nfarms10km = 7;
  if (this->_internal_nfarms10km() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_nfarms10km(), target);
  }

  // repeated int32 nfreeplots10km = 8;
  {
    int byte_size = _impl_._nfreeplots10km_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_nfreeplots10km(), byte_size, target);
    }
  }

  // repeated double avNewRents = 9;
  if (this->_internal_avnewrents_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_avnewrents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rl.RLData)
  return target;
}

size_t RLData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rl.RLData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rl.RLData.plots restPlotsOfType = 1;
  total_size += 1UL * this->_internal_restplotsoftype_size();
  for (const auto& msg : this->_impl_.restplotsoftype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, .rl.RLData.invlife> restInvests = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_restinvests_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >::const_iterator
      it = this->_internal_restinvests().begin();
      it != this->_internal_restinvests().end(); ++it) {
    total_size += RLData_RestInvestsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated double recentRents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_recentrents_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 nfreeplots10km = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.nfreeplots10km_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._nfreeplots10km_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double avNewRents = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_avnewrents_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 age = 2;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // float liquidity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_liquidity = this->_internal_liquidity();
  uint32_t raw_liquidity;
  memcpy(&raw_liquidity, &tmp_liquidity, sizeof(tmp_liquidity));
  if (raw_liquidity != 0) {
    total_size += 1 + 4;
  }

  // float management = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_management = this->_internal_management();
  uint32_t raw_management;
  memcpy(&raw_management, &tmp_management, sizeof(tmp_management));
  if (raw_management != 0) {
    total_size += 1 + 4;
  }

  // int32 nfarms10km = 7;
  if (this->_internal_nfarms10km() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nfarms10km());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RLData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RLData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RLData::GetClassData() const { return &_class_data_; }


void RLData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RLData*>(&to_msg);
  auto& from = static_cast<const RLData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rl.RLData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.restplotsoftype_.MergeFrom(from._impl_.restplotsoftype_);
  _this->_impl_.restinvests_.MergeFrom(from._impl_.restinvests_);
  _this->_impl_.recentrents_.MergeFrom(from._impl_.recentrents_);
  _this->_impl_.nfreeplots10km_.MergeFrom(from._impl_.nfreeplots10km_);
  _this->_impl_.avnewrents_.MergeFrom(from._impl_.avnewrents_);
  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_liquidity = from._internal_liquidity();
  uint32_t raw_liquidity;
  memcpy(&raw_liquidity, &tmp_liquidity, sizeof(tmp_liquidity));
  if (raw_liquidity != 0) {
    _this->_internal_set_liquidity(from._internal_liquidity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_management = from._internal_management();
  uint32_t raw_management;
  memcpy(&raw_management, &tmp_management, sizeof(tmp_management));
  if (raw_management != 0) {
    _this->_internal_set_management(from._internal_management());
  }
  if (from._internal_nfarms10km() != 0) {
    _this->_internal_set_nfarms10km(from._internal_nfarms10km());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RLData::CopyFrom(const RLData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rl.RLData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLData::IsInitialized() const {
  return true;
}

void RLData::InternalSwap(RLData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.restplotsoftype_.InternalSwap(&other->_impl_.restplotsoftype_);
  _impl_.restinvests_.InternalSwap(&other->_impl_.restinvests_);
  _impl_.recentrents_.InternalSwap(&other->_impl_.recentrents_);
  _impl_.nfreeplots10km_.InternalSwap(&other->_impl_.nfreeplots10km_);
  _impl_.avnewrents_.InternalSwap(&other->_impl_.avnewrents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RLData, _impl_.nfarms10km_)
      + sizeof(RLData::_impl_.nfarms10km_)
      - PROTOBUF_FIELD_OFFSET(RLData, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RLData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pydata_2eproto_getter, &descriptor_table_pydata_2eproto_once,
      file_level_metadata_pydata_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rl::RLData_RestInvestsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::rl::RLData_RestInvestsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rl::RLData_RestInvestsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rl::RLData_plots*
Arena::CreateMaybeMessage< ::rl::RLData_plots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rl::RLData_plots >(arena);
}
template<> PROTOBUF_NOINLINE ::rl::RLData_invlife*
Arena::CreateMaybeMessage< ::rl::RLData_invlife >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rl::RLData_invlife >(arena);
}
template<> PROTOBUF_NOINLINE ::rl::RLData*
Arena::CreateMaybeMessage< ::rl::RLData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rl::RLData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
