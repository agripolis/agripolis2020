// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pydata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pydata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pydata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pydata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pydata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pydata_2eproto;
namespace rl {
class RLData;
struct RLDataDefaultTypeInternal;
extern RLDataDefaultTypeInternal _RLData_default_instance_;
class RLData_RestInvestsEntry_DoNotUse;
struct RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal;
extern RLData_RestInvestsEntry_DoNotUseDefaultTypeInternal _RLData_RestInvestsEntry_DoNotUse_default_instance_;
class RLData_invlife;
struct RLData_invlifeDefaultTypeInternal;
extern RLData_invlifeDefaultTypeInternal _RLData_invlife_default_instance_;
class RLData_plots;
struct RLData_plotsDefaultTypeInternal;
extern RLData_plotsDefaultTypeInternal _RLData_plots_default_instance_;
}  // namespace rl
PROTOBUF_NAMESPACE_OPEN
template<> ::rl::RLData* Arena::CreateMaybeMessage<::rl::RLData>(Arena*);
template<> ::rl::RLData_RestInvestsEntry_DoNotUse* Arena::CreateMaybeMessage<::rl::RLData_RestInvestsEntry_DoNotUse>(Arena*);
template<> ::rl::RLData_invlife* Arena::CreateMaybeMessage<::rl::RLData_invlife>(Arena*);
template<> ::rl::RLData_plots* Arena::CreateMaybeMessage<::rl::RLData_plots>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rl {

// ===================================================================

class RLData_RestInvestsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RLData_RestInvestsEntry_DoNotUse, 
    int32_t, ::rl::RLData_invlife,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RLData_RestInvestsEntry_DoNotUse, 
    int32_t, ::rl::RLData_invlife,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RLData_RestInvestsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RLData_RestInvestsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RLData_RestInvestsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RLData_RestInvestsEntry_DoNotUse& other);
  static const RLData_RestInvestsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RLData_RestInvestsEntry_DoNotUse*>(&_RLData_RestInvestsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_pydata_2eproto;
};

// -------------------------------------------------------------------

class RLData_plots final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rl.RLData.plots) */ {
 public:
  inline RLData_plots() : RLData_plots(nullptr) {}
  ~RLData_plots() override;
  explicit PROTOBUF_CONSTEXPR RLData_plots(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RLData_plots(const RLData_plots& from);
  RLData_plots(RLData_plots&& from) noexcept
    : RLData_plots() {
    *this = ::std::move(from);
  }

  inline RLData_plots& operator=(const RLData_plots& from) {
    CopyFrom(from);
    return *this;
  }
  inline RLData_plots& operator=(RLData_plots&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RLData_plots& default_instance() {
    return *internal_default_instance();
  }
  static inline const RLData_plots* internal_default_instance() {
    return reinterpret_cast<const RLData_plots*>(
               &_RLData_plots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RLData_plots& a, RLData_plots& b) {
    a.Swap(&b);
  }
  inline void Swap(RLData_plots* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RLData_plots* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RLData_plots* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RLData_plots>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RLData_plots& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RLData_plots& from) {
    RLData_plots::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RLData_plots* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rl.RLData.plots";
  }
  protected:
  explicit RLData_plots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
  };
  // repeated int32 n = 1;
  int n_size() const;
  private:
  int _internal_n_size() const;
  public:
  void clear_n();
  private:
  int32_t _internal_n(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_n() const;
  void _internal_add_n(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_n();
  public:
  int32_t n(int index) const;
  void set_n(int index, int32_t value);
  void add_n(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      n() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_n();

  // @@protoc_insertion_point(class_scope:rl.RLData.plots)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > n_;
    mutable std::atomic<int> _n_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pydata_2eproto;
};
// -------------------------------------------------------------------

class RLData_invlife final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rl.RLData.invlife) */ {
 public:
  inline RLData_invlife() : RLData_invlife(nullptr) {}
  ~RLData_invlife() override;
  explicit PROTOBUF_CONSTEXPR RLData_invlife(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RLData_invlife(const RLData_invlife& from);
  RLData_invlife(RLData_invlife&& from) noexcept
    : RLData_invlife() {
    *this = ::std::move(from);
  }

  inline RLData_invlife& operator=(const RLData_invlife& from) {
    CopyFrom(from);
    return *this;
  }
  inline RLData_invlife& operator=(RLData_invlife&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RLData_invlife& default_instance() {
    return *internal_default_instance();
  }
  static inline const RLData_invlife* internal_default_instance() {
    return reinterpret_cast<const RLData_invlife*>(
               &_RLData_invlife_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RLData_invlife& a, RLData_invlife& b) {
    a.Swap(&b);
  }
  inline void Swap(RLData_invlife* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RLData_invlife* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RLData_invlife* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RLData_invlife>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RLData_invlife& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RLData_invlife& from) {
    RLData_invlife::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RLData_invlife* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rl.RLData.invlife";
  }
  protected:
  explicit RLData_invlife(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLifeFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // double life = 2;
  void clear_life();
  double life() const;
  void set_life(double value);
  private:
  double _internal_life() const;
  void _internal_set_life(double value);
  public:

  // int32 num = 1;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rl.RLData.invlife)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double life_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pydata_2eproto;
};
// -------------------------------------------------------------------

class RLData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rl.RLData) */ {
 public:
  inline RLData() : RLData(nullptr) {}
  ~RLData() override;
  explicit PROTOBUF_CONSTEXPR RLData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RLData(const RLData& from);
  RLData(RLData&& from) noexcept
    : RLData() {
    *this = ::std::move(from);
  }

  inline RLData& operator=(const RLData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RLData& operator=(RLData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RLData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RLData* internal_default_instance() {
    return reinterpret_cast<const RLData*>(
               &_RLData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RLData& a, RLData& b) {
    a.Swap(&b);
  }
  inline void Swap(RLData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RLData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RLData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RLData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RLData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RLData& from) {
    RLData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RLData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rl.RLData";
  }
  protected:
  explicit RLData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RLData_plots plots;
  typedef RLData_invlife invlife;

  // accessors -------------------------------------------------------

  enum : int {
    kRestPlotsOfTypeFieldNumber = 1,
    kRestInvestsFieldNumber = 5,
    kRecentRentsFieldNumber = 6,
    kNfreeplots10KmFieldNumber = 8,
    kAvNewRentsFieldNumber = 9,
    kAgeFieldNumber = 2,
    kLiquidityFieldNumber = 3,
    kManagementFieldNumber = 4,
    kNfarms10KmFieldNumber = 7,
  };
  // repeated .rl.RLData.plots restPlotsOfType = 1;
  int restplotsoftype_size() const;
  private:
  int _internal_restplotsoftype_size() const;
  public:
  void clear_restplotsoftype();
  ::rl::RLData_plots* mutable_restplotsoftype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rl::RLData_plots >*
      mutable_restplotsoftype();
  private:
  const ::rl::RLData_plots& _internal_restplotsoftype(int index) const;
  ::rl::RLData_plots* _internal_add_restplotsoftype();
  public:
  const ::rl::RLData_plots& restplotsoftype(int index) const;
  ::rl::RLData_plots* add_restplotsoftype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rl::RLData_plots >&
      restplotsoftype() const;

  // map<int32, .rl.RLData.invlife> restInvests = 5;
  int restinvests_size() const;
  private:
  int _internal_restinvests_size() const;
  public:
  void clear_restinvests();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >&
      _internal_restinvests() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >*
      _internal_mutable_restinvests();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >&
      restinvests() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >*
      mutable_restinvests();

  // repeated double recentRents = 6;
  int recentrents_size() const;
  private:
  int _internal_recentrents_size() const;
  public:
  void clear_recentrents();
  private:
  double _internal_recentrents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_recentrents() const;
  void _internal_add_recentrents(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_recentrents();
  public:
  double recentrents(int index) const;
  void set_recentrents(int index, double value);
  void add_recentrents(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      recentrents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_recentrents();

  // repeated int32 nfreeplots10km = 8;
  int nfreeplots10km_size() const;
  private:
  int _internal_nfreeplots10km_size() const;
  public:
  void clear_nfreeplots10km();
  private:
  int32_t _internal_nfreeplots10km(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_nfreeplots10km() const;
  void _internal_add_nfreeplots10km(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_nfreeplots10km();
  public:
  int32_t nfreeplots10km(int index) const;
  void set_nfreeplots10km(int index, int32_t value);
  void add_nfreeplots10km(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      nfreeplots10km() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_nfreeplots10km();

  // repeated double avNewRents = 9;
  int avnewrents_size() const;
  private:
  int _internal_avnewrents_size() const;
  public:
  void clear_avnewrents();
  private:
  double _internal_avnewrents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_avnewrents() const;
  void _internal_add_avnewrents(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_avnewrents();
  public:
  double avnewrents(int index) const;
  void set_avnewrents(int index, double value);
  void add_avnewrents(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      avnewrents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_avnewrents();

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // float liquidity = 3;
  void clear_liquidity();
  float liquidity() const;
  void set_liquidity(float value);
  private:
  float _internal_liquidity() const;
  void _internal_set_liquidity(float value);
  public:

  // float management = 4;
  void clear_management();
  float management() const;
  void set_management(float value);
  private:
  float _internal_management() const;
  void _internal_set_management(float value);
  public:

  // int32 nfarms10km = 7;
  void clear_nfarms10km();
  int32_t nfarms10km() const;
  void set_nfarms10km(int32_t value);
  private:
  int32_t _internal_nfarms10km() const;
  void _internal_set_nfarms10km(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rl.RLData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rl::RLData_plots > restplotsoftype_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RLData_RestInvestsEntry_DoNotUse,
        int32_t, ::rl::RLData_invlife,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> restinvests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > recentrents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > nfreeplots10km_;
    mutable std::atomic<int> _nfreeplots10km_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > avnewrents_;
    int32_t age_;
    float liquidity_;
    float management_;
    int32_t nfarms10km_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pydata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RLData_plots

// repeated int32 n = 1;
inline int RLData_plots::_internal_n_size() const {
  return _impl_.n_.size();
}
inline int RLData_plots::n_size() const {
  return _internal_n_size();
}
inline void RLData_plots::clear_n() {
  _impl_.n_.Clear();
}
inline int32_t RLData_plots::_internal_n(int index) const {
  return _impl_.n_.Get(index);
}
inline int32_t RLData_plots::n(int index) const {
  // @@protoc_insertion_point(field_get:rl.RLData.plots.n)
  return _internal_n(index);
}
inline void RLData_plots::set_n(int index, int32_t value) {
  _impl_.n_.Set(index, value);
  // @@protoc_insertion_point(field_set:rl.RLData.plots.n)
}
inline void RLData_plots::_internal_add_n(int32_t value) {
  _impl_.n_.Add(value);
}
inline void RLData_plots::add_n(int32_t value) {
  _internal_add_n(value);
  // @@protoc_insertion_point(field_add:rl.RLData.plots.n)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RLData_plots::_internal_n() const {
  return _impl_.n_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RLData_plots::n() const {
  // @@protoc_insertion_point(field_list:rl.RLData.plots.n)
  return _internal_n();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RLData_plots::_internal_mutable_n() {
  return &_impl_.n_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RLData_plots::mutable_n() {
  // @@protoc_insertion_point(field_mutable_list:rl.RLData.plots.n)
  return _internal_mutable_n();
}

// -------------------------------------------------------------------

// RLData_invlife

// int32 num = 1;
inline void RLData_invlife::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RLData_invlife::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RLData_invlife::num() const {
  // @@protoc_insertion_point(field_get:rl.RLData.invlife.num)
  return _internal_num();
}
inline void RLData_invlife::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RLData_invlife::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:rl.RLData.invlife.num)
}

// double life = 2;
inline void RLData_invlife::clear_life() {
  _impl_.life_ = 0;
}
inline double RLData_invlife::_internal_life() const {
  return _impl_.life_;
}
inline double RLData_invlife::life() const {
  // @@protoc_insertion_point(field_get:rl.RLData.invlife.life)
  return _internal_life();
}
inline void RLData_invlife::_internal_set_life(double value) {
  
  _impl_.life_ = value;
}
inline void RLData_invlife::set_life(double value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:rl.RLData.invlife.life)
}

// -------------------------------------------------------------------

// RLData

// repeated .rl.RLData.plots restPlotsOfType = 1;
inline int RLData::_internal_restplotsoftype_size() const {
  return _impl_.restplotsoftype_.size();
}
inline int RLData::restplotsoftype_size() const {
  return _internal_restplotsoftype_size();
}
inline void RLData::clear_restplotsoftype() {
  _impl_.restplotsoftype_.Clear();
}
inline ::rl::RLData_plots* RLData::mutable_restplotsoftype(int index) {
  // @@protoc_insertion_point(field_mutable:rl.RLData.restPlotsOfType)
  return _impl_.restplotsoftype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rl::RLData_plots >*
RLData::mutable_restplotsoftype() {
  // @@protoc_insertion_point(field_mutable_list:rl.RLData.restPlotsOfType)
  return &_impl_.restplotsoftype_;
}
inline const ::rl::RLData_plots& RLData::_internal_restplotsoftype(int index) const {
  return _impl_.restplotsoftype_.Get(index);
}
inline const ::rl::RLData_plots& RLData::restplotsoftype(int index) const {
  // @@protoc_insertion_point(field_get:rl.RLData.restPlotsOfType)
  return _internal_restplotsoftype(index);
}
inline ::rl::RLData_plots* RLData::_internal_add_restplotsoftype() {
  return _impl_.restplotsoftype_.Add();
}
inline ::rl::RLData_plots* RLData::add_restplotsoftype() {
  ::rl::RLData_plots* _add = _internal_add_restplotsoftype();
  // @@protoc_insertion_point(field_add:rl.RLData.restPlotsOfType)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rl::RLData_plots >&
RLData::restplotsoftype() const {
  // @@protoc_insertion_point(field_list:rl.RLData.restPlotsOfType)
  return _impl_.restplotsoftype_;
}

// int32 age = 2;
inline void RLData::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t RLData::_internal_age() const {
  return _impl_.age_;
}
inline int32_t RLData::age() const {
  // @@protoc_insertion_point(field_get:rl.RLData.age)
  return _internal_age();
}
inline void RLData::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void RLData::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:rl.RLData.age)
}

// float liquidity = 3;
inline void RLData::clear_liquidity() {
  _impl_.liquidity_ = 0;
}
inline float RLData::_internal_liquidity() const {
  return _impl_.liquidity_;
}
inline float RLData::liquidity() const {
  // @@protoc_insertion_point(field_get:rl.RLData.liquidity)
  return _internal_liquidity();
}
inline void RLData::_internal_set_liquidity(float value) {
  
  _impl_.liquidity_ = value;
}
inline void RLData::set_liquidity(float value) {
  _internal_set_liquidity(value);
  // @@protoc_insertion_point(field_set:rl.RLData.liquidity)
}

// float management = 4;
inline void RLData::clear_management() {
  _impl_.management_ = 0;
}
inline float RLData::_internal_management() const {
  return _impl_.management_;
}
inline float RLData::management() const {
  // @@protoc_insertion_point(field_get:rl.RLData.management)
  return _internal_management();
}
inline void RLData::_internal_set_management(float value) {
  
  _impl_.management_ = value;
}
inline void RLData::set_management(float value) {
  _internal_set_management(value);
  // @@protoc_insertion_point(field_set:rl.RLData.management)
}

// map<int32, .rl.RLData.invlife> restInvests = 5;
inline int RLData::_internal_restinvests_size() const {
  return _impl_.restinvests_.size();
}
inline int RLData::restinvests_size() const {
  return _internal_restinvests_size();
}
inline void RLData::clear_restinvests() {
  _impl_.restinvests_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >&
RLData::_internal_restinvests() const {
  return _impl_.restinvests_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >&
RLData::restinvests() const {
  // @@protoc_insertion_point(field_map:rl.RLData.restInvests)
  return _internal_restinvests();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >*
RLData::_internal_mutable_restinvests() {
  return _impl_.restinvests_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::rl::RLData_invlife >*
RLData::mutable_restinvests() {
  // @@protoc_insertion_point(field_mutable_map:rl.RLData.restInvests)
  return _internal_mutable_restinvests();
}

// repeated double recentRents = 6;
inline int RLData::_internal_recentrents_size() const {
  return _impl_.recentrents_.size();
}
inline int RLData::recentrents_size() const {
  return _internal_recentrents_size();
}
inline void RLData::clear_recentrents() {
  _impl_.recentrents_.Clear();
}
inline double RLData::_internal_recentrents(int index) const {
  return _impl_.recentrents_.Get(index);
}
inline double RLData::recentrents(int index) const {
  // @@protoc_insertion_point(field_get:rl.RLData.recentRents)
  return _internal_recentrents(index);
}
inline void RLData::set_recentrents(int index, double value) {
  _impl_.recentrents_.Set(index, value);
  // @@protoc_insertion_point(field_set:rl.RLData.recentRents)
}
inline void RLData::_internal_add_recentrents(double value) {
  _impl_.recentrents_.Add(value);
}
inline void RLData::add_recentrents(double value) {
  _internal_add_recentrents(value);
  // @@protoc_insertion_point(field_add:rl.RLData.recentRents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RLData::_internal_recentrents() const {
  return _impl_.recentrents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RLData::recentrents() const {
  // @@protoc_insertion_point(field_list:rl.RLData.recentRents)
  return _internal_recentrents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RLData::_internal_mutable_recentrents() {
  return &_impl_.recentrents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RLData::mutable_recentrents() {
  // @@protoc_insertion_point(field_mutable_list:rl.RLData.recentRents)
  return _internal_mutable_recentrents();
}

// int32 nfarms10km = 7;
inline void RLData::clear_nfarms10km() {
  _impl_.nfarms10km_ = 0;
}
inline int32_t RLData::_internal_nfarms10km() const {
  return _impl_.nfarms10km_;
}
inline int32_t RLData::nfarms10km() const {
  // @@protoc_insertion_point(field_get:rl.RLData.nfarms10km)
  return _internal_nfarms10km();
}
inline void RLData::_internal_set_nfarms10km(int32_t value) {
  
  _impl_.nfarms10km_ = value;
}
inline void RLData::set_nfarms10km(int32_t value) {
  _internal_set_nfarms10km(value);
  // @@protoc_insertion_point(field_set:rl.RLData.nfarms10km)
}

// repeated int32 nfreeplots10km = 8;
inline int RLData::_internal_nfreeplots10km_size() const {
  return _impl_.nfreeplots10km_.size();
}
inline int RLData::nfreeplots10km_size() const {
  return _internal_nfreeplots10km_size();
}
inline void RLData::clear_nfreeplots10km() {
  _impl_.nfreeplots10km_.Clear();
}
inline int32_t RLData::_internal_nfreeplots10km(int index) const {
  return _impl_.nfreeplots10km_.Get(index);
}
inline int32_t RLData::nfreeplots10km(int index) const {
  // @@protoc_insertion_point(field_get:rl.RLData.nfreeplots10km)
  return _internal_nfreeplots10km(index);
}
inline void RLData::set_nfreeplots10km(int index, int32_t value) {
  _impl_.nfreeplots10km_.Set(index, value);
  // @@protoc_insertion_point(field_set:rl.RLData.nfreeplots10km)
}
inline void RLData::_internal_add_nfreeplots10km(int32_t value) {
  _impl_.nfreeplots10km_.Add(value);
}
inline void RLData::add_nfreeplots10km(int32_t value) {
  _internal_add_nfreeplots10km(value);
  // @@protoc_insertion_point(field_add:rl.RLData.nfreeplots10km)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RLData::_internal_nfreeplots10km() const {
  return _impl_.nfreeplots10km_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RLData::nfreeplots10km() const {
  // @@protoc_insertion_point(field_list:rl.RLData.nfreeplots10km)
  return _internal_nfreeplots10km();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RLData::_internal_mutable_nfreeplots10km() {
  return &_impl_.nfreeplots10km_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RLData::mutable_nfreeplots10km() {
  // @@protoc_insertion_point(field_mutable_list:rl.RLData.nfreeplots10km)
  return _internal_mutable_nfreeplots10km();
}

// repeated double avNewRents = 9;
inline int RLData::_internal_avnewrents_size() const {
  return _impl_.avnewrents_.size();
}
inline int RLData::avnewrents_size() const {
  return _internal_avnewrents_size();
}
inline void RLData::clear_avnewrents() {
  _impl_.avnewrents_.Clear();
}
inline double RLData::_internal_avnewrents(int index) const {
  return _impl_.avnewrents_.Get(index);
}
inline double RLData::avnewrents(int index) const {
  // @@protoc_insertion_point(field_get:rl.RLData.avNewRents)
  return _internal_avnewrents(index);
}
inline void RLData::set_avnewrents(int index, double value) {
  _impl_.avnewrents_.Set(index, value);
  // @@protoc_insertion_point(field_set:rl.RLData.avNewRents)
}
inline void RLData::_internal_add_avnewrents(double value) {
  _impl_.avnewrents_.Add(value);
}
inline void RLData::add_avnewrents(double value) {
  _internal_add_avnewrents(value);
  // @@protoc_insertion_point(field_add:rl.RLData.avNewRents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RLData::_internal_avnewrents() const {
  return _impl_.avnewrents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
RLData::avnewrents() const {
  // @@protoc_insertion_point(field_list:rl.RLData.avNewRents)
  return _internal_avnewrents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RLData::_internal_mutable_avnewrents() {
  return &_impl_.avnewrents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
RLData::mutable_avnewrents() {
  // @@protoc_insertion_point(field_mutable_list:rl.RLData.avNewRents)
  return _internal_mutable_avnewrents();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pydata_2eproto
